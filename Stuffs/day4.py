from flask import Flask, request, render_template, redirect, url_for
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os
import pandas as pd

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index1.html')

@app.route('/send-email', methods=['POST'])
def send_email():
    recipient = request.form['recipient']
    cc_emails = request.form['cc']
    files = request.files.getlist('files')
    
    # Columns to be included in the email body
    selected_columns = ['Column1', 'Column2', 'Column3']  # Adjust column names as needed
    
    # Save files temporarily
    file_paths = []
    excel_contents = []
    for file in files:
        file_path = os.path.join('uploads', file.filename)
        file.save(file_path)
        file_paths.append(file_path)
        
        # Read Excel file content and select specific columns
        df = pd.read_excel(file_path, usecols=selected_columns)
        excel_content = df.to_html(index=False)
        excel_contents.append(excel_content)
    
    # Email configuration
    sender_email = "your_email@gmail.com"
    password = "your_app_password"  # Use the App Password generated by Google

    # Create the email
    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = recipient
    message["Subject"] = "Excel File Attachments"

    # Add CC recipients
    if cc_emails:
        message["Cc"] = cc_emails
        cc_list = cc_emails.split(',')
    else:
        cc_list = []

    # Email body
    body = "Please find the attached Excel files.<br><br>"
    for i, content in enumerate(excel_contents):
        body += f"<h3>Content of {os.path.basename(file_paths[i])}:</h3>"
        body += content + "<br><br>"
    message.attach(MIMEText(body, "html"))

    # Attach files
    for file_path in file_paths:
        with open(file_path, "rb") as attachment:
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header(
                "Content-Disposition",
                f"attachment; filename= {os.path.basename(file_path)}",
            )
            message.attach(part)

    # Send the email
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(sender_email, password)
            server.sendmail(sender_email, [recipient] + cc_list, message.as_string())
        print("Email sent successfully!")
    except Exception as e:
        print(f"Error: {e}")
    finally:
        for file_path in file_paths:
            os.remove(file_path)  # Remove the files after sending
    
    return redirect(url_for('index'))

if __name__ == '__main__':
    if not os.path.exists('uploads'):
        os.makedirs('uploads')
    app.run(debug=True)
